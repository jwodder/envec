- Rename details.pl to envec.pl or fetch.pl? (or tutor.pl?)
- Rename update.sh?

- Robustness:
 - Handle XML::DOM::Lite parse errors
 - Use a more widespread/reliable XML parsing library than XML::DOM::Lite
 - Make EnVec::Multipart::loadParts check for names appearing more than once
 - details.pl should retry failed `get's under certain circumstances
 - EnVec::Sets::loadSets should check that each entry has the right number of
   fields; cf. EnVec::Multipart::loadParts

- Features:
 - Implement the rest of the features for details.pl (See the top of its source)
 - Make the code faster (especially EnVec::Reader)
 - Add special handling/storage for leveler cards
 - Add a means to read EnVec::Card objects from a JSON/XML file one at a time
   rather than all at once
 - Give EnVec::Card a fromXML method
 - EnVec::Card->showField1 should treat a negative width as disabling
   line-wrapping
 - Fix/improve the PostScript output of listify.pl
 - Give EnVec::Card::Content a "devotion" method?

- Coding:
 - Represent rarities by enums?  At the very least, make their representations
   consistent (e.g., 'Mythic Rare' vs. 'Mythic rare' vs. 'mythic rare' vs.
   'Mythic' vs. ...) and abstract away the conversions between long rarity
   names and single characters.
 - Make the storage of Content->text fields mirror their representation in
   mtgcard.dtd
 - Runtime type enforcement:
  - Make EnVec::Card only allow valid cardClass values
  - Make EnVec::Card::Content prohibit empty names
  - Make EnVec::Card::Content automatically convert empty fields to undef
 - Give EnVec::Card a toHashref method
 - Give EnVec.pm tags for the export lists of each submodule
 - Make EnVec.pm preserve the non-'all' tags of submodules
 - Ensure that the printings fields of Card objects are always sorted?
 - Ensure that the multiverseid fields (et alii?) of Printing objects are
   always sorted?
 - Give EnVec::Multipart 'primaries' and 'secondaries' functions (rethink
   names) for getting all left/top/front and right/bottom/back portions of
   multipart cards, respectively
 - Give EnVec::Multipart an isMultipart function
 - Make the default datafile paths absolute rather than relative (possibly with
   a way to set the datafile directory at runtime?)
 - Problem: At some point, LWP::Simple was updated in such a way that 'get' now
   returns text strings rather than binary strings when fetching pages from
   Gatherer.  In order to ensure that the code (which assumes byte strings)
   still works with both versions of LWP::Simple, details.pl now decodes any
   text strings that 'get' may return.  This is likely inefficient, and some
   other solution should be sought instead.  Parts of the code for which
   encoding is relevant:
  - output
  - input from data/*
  - EnVec::Util::trim should not manipulate 0xA0's that occur in byte strings,
    but it may manipulate those in text strings.
  - EnVec::Util::parseTypes currently can only match occurrences of U+2014 in
    UTF-8 byte strings, not in text strings.
  - In the absence of 'use utf8;', the ² and ½ in Details.pm are byte strings;
    what effect would this have when matching the enclosing s/// expressions
    against text strings?
 - Make Sets.pm and Multipart.pm use objects for storing & retrieving their
   respective data rather than file-global variables
 - Should subcard numbering in XML output (and internal rulings representation,
   et alii?) start from 1 for the first part rather than 0?
 - Rewrite everything in Python?
 - Rethink the Multival->get method
 - Be more consistent with which classes have a copy() method and which can be
   copied by passing an instance to the constructor
 - Eliminate EnVec::Card::Content->isNontraditional?
 - Make the fromHashref methods no longer support construction from a
   pre-existing instance?
 - Give Content and Printing (and Multival?) a fromJSON method each?
 - Eliminate EnVec::Card->newCard?
 - Move %formats from Card.pm to Multipart.pm?

- Data & documentation:
 - Add documentation
 - Rewrite spoilers/* so that it makes sense to other people
 - For the multiversion cards in rarities.tsv, give each entry a field for the
   multiverseid and another field for a short description (to become the
   'notes' field) that a mortal can use to identify the version
 - Add files to data/ for:
  - Promo cards not in Gatherer
  - The release dates of the various promo cards
  - The release dates of the different Vanguard card sets
  - The Anthologies, Deckmasters, & Duels of the Planeswalkers (et alii?) sets
  - Multiversion cards not in rarities.tsv (e.g., alternate-art foils from
    Planeshift, Brothers Yamazaki, ???)
 - Add Cockatrice's abbreviations to abbrevs.tsv?
 - Add a description of the JSON output format

- For later:
 - Implement Card->showField1('printings')
 - Better handling of Uncards, specifically:
  - B.F.M.
  - Who/What/When/Where/Why
  - Curse of the Fire Penguin
  - Little Girl's CMC
  - Should fractional P/T's be stored as floats rather than as ints with '½'
    appended?
  - How should mtgcard.dtd handle fractional mana symbols?
  - Give all Uncards an attribute marking them as such?
 - Support fetching & storing format legality information
 - Add a function for parsing an individual card page for printed (rather than
   Oracle) text
 - Add elements to mtgcard.dtd for storing printed text, expansion symbols,
   card language, etc.
 - Add a wrapper around parseDetails that downloads and parses a given
   multiverseid?
 - Incorporate reserved list membership into card data
 - Overload stringification of Multival objects?
 - Make use of all of the unused data/ files
 - Store information on which sets/cards are foiled (and which are all-foil) ?
 - Add a column to sets.tsv for Modern eligibility
 - Add a column to sets.tsv for border color (black, white, or silver)
